Google Sheet ကို Database အဖြစ်အသုံးပြုပြီး၊ GitHub Pages မှာ အခမဲ့ Host တင်နိုင်မယ့် Domain Management System တစ်ခုကို အောက်မှာ အဆင့်လိုက် ရေးဆွဲဖော်ပြပေးလိုက်ပါတယ်။
ဒီစနစ်မှာ HTML, CSS, JavaScript (Frontend) နဲ့ Google Apps Script (Backend) ကို အဓိက အသုံးပြုသွားမှာ ဖြစ်ပါတယ်။
အဆင့် (၁) - Google Sheet ကို ပြင်ဆင်ခြင်း (Database)
Google Drive မှာ Google Sheet အသစ်တစ်ခု ဖန်တီးပြီး "Domain Management" လို့ နာမည်ပေးပါ။
Sheet အသစ်ထဲမှာ Tab (Sheet) နှစ်ခု ပြုလုပ်ပါ။
Users
Domains
Users Sheet မှာ အောက်ပါအတိုင်း Column ခေါင်းစဉ်များ တပ်ပါ။
UserID (ဒါက Primary Key ပါ၊ Auto-increment ဖြစ်အောင် Script ထဲမှာ ထည့်ပါမယ်)
Username
Password (လုံခြုံရေးအတွက် သတိပေးချက်: ဒီနည်းလမ်းဟာ Demo Project အတွက်သာ ဖြစ်ပါတယ်။ တကယ့် Production မှာ Password များကို ဒီလို Plain text နဲ့ မသိမ်းသင့်ပါ)
FullName
Role (admin or dmd)
Users Sheet ထဲကို အချက်အလက်များ ကြိုတင်ထည့်သွင်းပါ။
| UserID | Username | Password | FullName | Role |
| :--- | :--- | :--- | :--- | :--- |
| 1 | admin | A@mmitsg | Administrator | admin |
| 2 | dmd | dcP@dmd | Domain Manager | dmd |
Domains Sheet မှာ အောက်ပါအတိုင်း Column ခေါင်းစဉ်များ တပ်ပါ။
DomainID (Auto-increment ဖြစ်အောင် Script က လုပ်ဆောင်ပါမယ်)
DomainName
OwnerUsername (ဒါက Users sheet က Username နဲ့ ချိတ်ဆက်ဖို့ပါ)
RegistrationDate
ExpiryDate
Status (e.g., Active, Expired, Pending)
Notes
အဆင့် (၂) - Google Apps Script (Backend Logic)
ဒီအပိုင်းက Google Sheet နဲ့ Frontend ကို ချိတ်ဆက်ပေးမယ့် အဓိက အပိုင်းဖြစ်ပါတယ်။
သင်ခုနက ဖန်တီးထားတဲ့ Google Sheet မှာ Extensions -> Apps Script ကို နှိပ်ပြီး Script Editor ကို ဖွင့်ပါ။
Code.gs ဆိုတဲ့ file ထဲမှာ ရှိနေတဲ့ ကုဒ်အဟောင်းတွေကို ဖျက်ပြီး အောက်က ကုဒ์ကို ကူးထည့်ပါ။
// Google Sheet ID ကို ဒီနေရာမှာ ထည့်ပါ။ (Browser URL ကနေ ကူးထည့်ပါ)
const SPREADSHEET_ID = "YOUR_SPREADSHEET_ID"; 
const usersSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName("Users");
const domainsSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName("Domains");

// Web App အတွက် အဓိက Function
function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    const action = data.action;

    let result = {};

    switch (action) {
      case 'login':
        result = loginUser(data.username, data.password);
        break;
      case 'getDomains':
        result = getDomains(data.user);
        break;
      case 'addDomain':
        result = addDomain(data.domainData);
        break;
      case 'updateDomain':
        result = updateDomain(data.domainData);
        break;
      case 'deleteDomain':
        result = deleteDomain(data.domainId);
        break;
      case 'getUserProfile':
        result = getUserProfile(data.username);
        break;
      case 'updateUserProfile':
        result = updateUserProfile(data.profileData);
        break;
      default:
        result = { status: 'error', message: 'Invalid action' };
    }
    
    return ContentService.createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// User Login Function
function loginUser(username, password) {
  const users = usersSheet.getDataRange().getValues();
  // Start from 1 to skip header row
  for (let i = 1; i < users.length; i++) {
    if (users[i][1] === username && users[i][2] === password) {
      return { status: 'success', user: { username: users[i][1], fullName: users[i][3], role: users[i][4] } };
    }
  }
  return { status: 'error', message: 'Invalid username or password' };
}

// Domain List ကို ရယူရန်
function getDomains(user) {
    const domains = domainsSheet.getDataRange().getValues();
    const headers = domains.shift(); // Get and remove header row
    let result = [];
    
    domains.forEach((row, index) => {
        let domainObject = {};
        headers.forEach((header, i) => {
            domainObject[header] = row[i];
        });
        domainObject.rowIndex = index + 2; // Sheet row index for easy updates

        // Admin ဆို အကုန်ပြ၊ dmd user ဆို သူပိုင်တာပဲပြ
        if (user.role === 'admin' || (user.role === 'dmd' && domainObject.OwnerUsername === user.username)) {
            result.push(domainObject);
        }
    });

    return { status: 'success', data: result };
}


// Domain အသစ်ထည့်ရန် (Admin only)
function addDomain(data) {
  const newId = domainsSheet.getLastRow(); // Simple auto-increment ID
  domainsSheet.appendRow([
    newId, 
    data.DomainName, 
    data.OwnerUsername, 
    data.RegistrationDate, 
    data.ExpiryDate, 
    data.Status,
    data.Notes
  ]);
  return { status: 'success', message: 'Domain added successfully' };
}

// Domain ပြင်ရန် (Admin only)
function updateDomain(data) {
    const range = domainsSheet.getRange(data.rowIndex, 1, 1, domainsSheet.getLastColumn());
    range.setValues([[
        data.DomainID,
        data.DomainName,
        data.OwnerUsername,
        data.RegistrationDate,
        data.ExpiryDate,
        data.Status,
        data.Notes
    ]]);
    return { status: 'success', message: 'Domain updated successfully' };
}

// Domain ဖျက်ရန် (Admin only)
function deleteDomain(domainId) {
    const data = domainsSheet.getDataRange().getValues();
    for(let i=1; i<data.length; i++){
        if(data[i][0] == domainId){ // Column 0 is DomainID
            domainsSheet.deleteRow(i+1);
            return { status: 'success', message: 'Domain deleted successfully' };
        }
    }
    return { status: 'error', message: 'Domain not found' };
}

// User Profile ရယူရန်
function getUserProfile(username) {
    const users = usersSheet.getDataRange().getValues();
    for (let i = 1; i < users.length; i++) {
        if (users[i][1] === username) {
            return { status: 'success', data: {
                rowIndex: i + 1,
                userId: users[i][0],
                username: users[i][1],
                fullName: users[i][3],
                role: users[i][4]
                // Don't send password
            }};
        }
    }
    return { status: 'error', message: 'User not found' };
}

// User Profile ပြင်ရန်
function updateUserProfile(data) {
    // In this simple system, we only allow changing FullName and Password
    const range = usersSheet.getRange(data.rowIndex, 1, 1, usersSheet.getLastColumn());
    let currentData = range.getValues()[0];

    currentData[2] = data.newPassword ? data.newPassword : currentData[2]; // Update password if new one is provided
    currentData[3] = data.fullName; // Update Full Name

    range.setValues([currentData]);
    return { status: 'success', message: 'Profile updated successfully' };
}

// doGet function is required for initial deployment but we use doPost
function doGet(e) {
  return HtmlService.createHtmlOutput("Please use POST method.");
}
Use code with caution.
JavaScript
Deploy လုပ်ခြင်း
Script Editor ရဲ့ ညာဘက်အပေါ်ထောင့်က Deploy -> New deployment ကိုနှိပ်ပါ။
Select type မှာ Web app ကိုရွေးပါ။
Description မှာ "Domain Management API" လို့ ရေးပါ။
Execute as ကို Me (your.email@gmail.com) ထားပါ။
Who has access ကို Anyone လို့ပြောင်းပါ။ ဒါက အရေးကြီးပါတယ်။ GitHub Pages ကနေ လှမ်းခေါ်လို့ရဖို့ပါ။
Deploy ကို နှိပ်ပါ။
Authorize access တောင်းရင် ခွင့်ပြုပေးပါ။ (Advanced -> Go to ... (unsafe) ကို နှိပ်ပြီး Allow လုပ်ရပါမယ်)
ပြီးသွားရင် Web app URL တစ်ခု ရလာပါလိမ့်မယ်။ အဲ့ဒီ URL ကို Copy ကူးပြီး သေချာသိမ်းထားပါ။ ဒါက Frontend နဲ့ ချိတ်ဆက်ဖို့ လိုအပ်ပါတယ်။
အဆင့် (၃) - Frontend (HTML, CSS, JavaScript)
ဒီ File များကို သင့်ကွန်ပျူတာမှာ Folder တစ်ခုထဲမှာ ဖန်တီးပါ။
1. index.html (Login Page)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Domain Management - Login</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="login-container">
        <h2>Domain Management System</h2>
        <form id="login-form">
            <div class="form-group">
                <label for="username">User Name</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit" id="login-btn">Login</button>
            <p id="error-message" class="error-message"></p>
        </form>
    </div>
    <script src="app.js"></script>
</body>
</html>
Use code with caution.
Html
2. dashboard.html (Main Application Page)
<!DOCTYPE html>
<html lang="my">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Domain Management</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="dashboard-container">
        <header>
            <h1>Domain Management Dashboard</h1>
            <div class="user-info">
                Welcome, <span id="user-fullname"></span> (<span id="user-role"></span>)
                <button id="profile-btn">Profile</button>
                <button id="logout-btn">Logout</button>
            </div>
        </header>

        <main>
            <div class="controls">
                <input type="text" id="search-bar" placeholder="Search by domain name...">
                <button id="add-domain-btn" class="admin-only" style="display:none;">+ Add Domain</button>
            </div>
            <div class="table-container">
                <table id="domain-table">
                    <thead>
                        <tr>
                            <th>Domain Name</th>
                            <th>Owner</th>
                            <th>Registration Date</th>
                            <th>Expiry Date</th>
                            <th>Status</th>
                            <th>Notes</th>
                            <th class="admin-only" style="display:none;">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="domain-table-body">
                        <!-- Data will be inserted here by JavaScript -->
                    </tbody>
                </table>
                 <div id="loading-spinner" style="display: none; text-align: center; padding: 20px;">Loading...</div>
            </div>
        </main>
    </div>

    <!-- Add/Edit Domain Modal -->
    <div id="domain-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn">×</span>
            <h2 id="modal-title">Add New Domain</h2>
            <form id="domain-form">
                <input type="hidden" id="domain-id">
                <input type="hidden" id="domain-row-index">
                <div class="form-group">
                    <label for="domain-name">Domain Name</label>
                    <input type="text" id="domain-name" required>
                </div>
                <div class="form-group">
                    <label for="owner-username">Owner Username</label>
                    <input type="text" id="owner-username" required>
                </div>
                <div class="form-group">
                    <label for="reg-date">Registration Date</label>
                    <input type="date" id="reg-date" required>
                </div>
                <div class="form-group">
                    <label for="exp-date">Expiry Date</label>
                    <input type="date" id="exp-date" required>
                </div>
                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status" required>
                        <option value="Active">Active</option>
                        <option value="Expired">Expired</option>
                        <option value="Pending">Pending</option>
                    </select>
                </div>
                 <div class="form-group">
                    <label for="notes">Notes</label>
                    <textarea id="notes"></textarea>
                </div>
                <button type="submit" id="save-domain-btn">Save Domain</button>
            </form>
        </div>
    </div>
    
    <!-- Profile Modal -->
    <div id="profile-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn">×</span>
            <h2>My Profile</h2>
            <form id="profile-form">
                 <input type="hidden" id="profile-row-index">
                <div class="form-group">
                    <label>Username</label>
                    <input type="text" id="profile-username" readonly>
                </div>
                <div class="form-group">
                    <label for="profile-fullname">Full Name</label>
                    <input type="text" id="profile-fullname" required>
                </div>
                <div class="form-group">
                    <label for="profile-new-password">New Password (leave blank if no change)</label>
                    <input type="password" id="profile-new-password">
                </div>
                <button type="submit">Update Profile</button>
            </form>
        </div>
    </div>

    <script src="app.js"></script>
</body>
</html>
Use code with caution.
Html
3. style.css (Styling)
body { font-family: sans-serif; background-color: #f4f4f9; margin: 0; }
.login-container { max-width: 400px; margin: 100px auto; padding: 20px; background: #fff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
.dashboard-container { max-width: 1200px; margin: 20px auto; padding: 20px; background: #fff; }
header { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #ddd; padding-bottom: 10px; margin-bottom: 20px; }
.form-group { margin-bottom: 15px; }
label { display: block; margin-bottom: 5px; }
input[type="text"], input[type="password"], input[type="date"], select, textarea { width: 100%; padding: 8px; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; }
button { background-color: #007bff; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }
button:hover { background-color: #0056b3; }
.error-message { color: red; margin-top: 10px; }
.controls { display: flex; justify-content: space-between; margin-bottom: 20px; }
#search-bar { width: 300px; }
.table-container { overflow-x: auto; }
table { width: 100%; border-collapse: collapse; }
th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
th { background-color: #f2f2f2; }
.action-btn { margin-right: 5px; padding: 5px 8px; font-size: 12px; }
.edit-btn { background-color: #ffc107; }
.delete-btn { background-color: #dc3545; }
.modal { display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4); }
.modal-content { background-color: #fefefe; margin: 10% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 500px; border-radius: 8px; }
.close-btn { color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer; }
Use code with caution.
Css
4. app.js (Client-side JavaScript Logic)
အရေးကြီး: YOUR_APPS_SCRIPT_URL နေရာမှာ သင် အဆင့်(၂) ကနေ ရလာတဲ့ Web App URL ကို အစားထိုးထည့်ပါ။
// ===================================================================
// !! IMPORTANT !!
// PASTE YOUR GOOGLE APPS SCRIPT WEB APP URL HERE
const SCRIPT_URL = "YOUR_APPS_SCRIPT_URL";
// ===================================================================

document.addEventListener('DOMContentLoaded', () => {
    const path = window.location.pathname;

    if (path.includes('index.html') || path === '/') {
        handleLoginPage();
    } else if (path.includes('dashboard.html')) {
        handleDashboardPage();
    }
});

// --- Login Page Logic ---
function handleLoginPage() {
    const loginForm = document.getElementById('login-form');
    if (!loginForm) return;

    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const errorMessage = document.getElementById('error-message');
        const loginBtn = document.getElementById('login-btn');

        loginBtn.disabled = true;
        loginBtn.textContent = 'Logging in...';
        errorMessage.textContent = '';

        try {
            const response = await fetch(SCRIPT_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'text/plain;charset=utf-8' },
                body: JSON.stringify({ action: 'login', username, password }),
            });
            const result = await response.json();

            if (result.status === 'success') {
                sessionStorage.setItem('user', JSON.stringify(result.user));
                window.location.href = 'dashboard.html';
            } else {
                errorMessage.textContent = result.message;
            }
        } catch (error) {
            errorMessage.textContent = 'An error occurred. Please try again.';
        } finally {
            loginBtn.disabled = false;
            loginBtn.textContent = 'Login';
        }
    });
}

// --- Dashboard Page Logic ---
function handleDashboardPage() {
    const user = JSON.parse(sessionStorage.getItem('user'));
    if (!user) {
        window.location.href = 'index.html';
        return;
    }

    // Setup UI based on user role
    setupDashboardUI(user);
    loadDomains(user);

    // Event Listeners
    document.getElementById('logout-btn').addEventListener('click', logout);
    document.getElementById('search-bar').addEventListener('input', handleSearch);
    
    // Admin-only listeners
    if(user.role === 'admin') {
        const addDomainBtn = document.getElementById('add-domain-btn');
        const domainForm = document.getElementById('domain-form');
        const modal = document.getElementById('domain-modal');
        const closeBtn = modal.querySelector('.close-btn');

        addDomainBtn.addEventListener('click', openAddModal);
        closeBtn.addEventListener('click', () => modal.style.display = 'none');
        domainForm.addEventListener('submit', handleDomainFormSubmit);
    }
    
    // Profile Modal Listeners
    const profileBtn = document.getElementById('profile-btn');
    const profileModal = document.getElementById('profile-modal');
    const profileCloseBtn = profileModal.querySelector('.close-btn');
    const profileForm = document.getElementById('profile-form');

    profileBtn.addEventListener('click', openProfileModal);
    profileCloseBtn.addEventListener('click', () => profileModal.style.display = 'none');
    profileForm.addEventListener('submit', handleProfileFormSubmit);
}

function setupDashboardUI(user) {
    document.getElementById('user-fullname').textContent = user.fullName;
    document.getElementById('user-role').textContent = user.role;

    if (user.role === 'admin') {
        document.querySelectorAll('.admin-only').forEach(el => el.style.display = 'revert');
    }
}

async function loadDomains(user) {
    const spinner = document.getElementById('loading-spinner');
    spinner.style.display = 'block';
    
    const response = await fetch(SCRIPT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'text/plain;charset=utf-8' },
        body: JSON.stringify({ action: 'getDomains', user }),
    });
    const result = await response.json();
    spinner.style.display = 'none';

    if (result.status === 'success') {
        renderDomains(result.data, user.role);
    } else {
        alert('Error loading domains: ' + result.message);
    }
}

function renderDomains(domains, role) {
    const tableBody = document.getElementById('domain-table-body');
    tableBody.innerHTML = ''; // Clear existing rows

    if (domains.length === 0) {
        const colSpan = role === 'admin' ? 7 : 6;
        tableBody.innerHTML = `<tr><td colspan="${colSpan}" style="text-align:center;">No domains found.</td></tr>`;
        return;
    }

    domains.forEach(domain => {
        const row = document.createElement('tr');
        row.dataset.domainName = domain.DomainName.toLowerCase();
        
        row.innerHTML = `
            <td>${domain.DomainName}</td>
            <td>${domain.OwnerUsername}</td>
            <td>${domain.RegistrationDate}</td>
            <td>${domain.ExpiryDate}</td>
            <td>${domain.Status}</td>
            <td>${domain.Notes || ''}</td>
            ${role === 'admin' ? 
            `<td class="admin-only">
                <button class="action-btn edit-btn" data-id="${domain.DomainID}" data-row-index="${domain.rowIndex}">Edit</button>
                <button class="action-btn delete-btn" data-id="${domain.DomainID}">Delete</button>
            </td>` : ''}
        `;
        tableBody.appendChild(row);
    });
    
    // Add event listeners for new buttons
    if (role === 'admin') {
        document.querySelectorAll('.edit-btn').forEach(btn => btn.addEventListener('click', (e) => openEditModal(e.target)));
        document.querySelectorAll('.delete-btn').forEach(btn => btn.addEventListener('click', (e) => deleteDomain(e.target.dataset.id)));
    }
}

function handleSearch(e) {
    const searchTerm = e.target.value.toLowerCase();
    const rows = document.querySelectorAll('#domain-table-body tr');
    rows.forEach(row => {
        const domainName = row.dataset.domainName;
        if (domainName && domainName.includes(searchTerm)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

function openAddModal() {
    document.getElementById('domain-form').reset();
    document.getElementById('modal-title').textContent = 'Add New Domain';
    document.getElementById('domain-id').value = '';
    document.getElementById('domain-row-index').value = '';
    document.getElementById('domain-modal').style.display = 'block';
}

function openEditModal(button) {
    const row = button.closest('tr');
    const cells = row.querySelectorAll('td');

    document.getElementById('modal-title').textContent = 'Edit Domain';
    document.getElementById('domain-id').value = button.dataset.id;
    document.getElementById('domain-row-index').value = button.dataset.rowIndex;

    document.getElementById('domain-name').value = cells[0].textContent;
    document.getElementById('owner-username').value = cells[1].textContent;
    document.getElementById('reg-date').value = cells[2].textContent;
    document.getElementById('exp-date').value = cells[3].textContent;
    document.getElementById('status').value = cells[4].textContent;
    document.getElementById('notes').value = cells[5].textContent;

    document.getElementById('domain-modal').style.display = 'block';
}

async function handleDomainFormSubmit(e) {
    e.preventDefault();
    const saveBtn = document.getElementById('save-domain-btn');
    saveBtn.disabled = true;
    saveBtn.textContent = 'Saving...';

    const domainData = {
        DomainID: document.getElementById('domain-id').value,
        rowIndex: document.getElementById('domain-row-index').value,
        DomainName: document.getElementById('domain-name').value,
        OwnerUsername: document.getElementById('owner-username').value,
        RegistrationDate: document.getElementById('reg-date').value,
        ExpiryDate: document.getElementById('exp-date').value,
        Status: document.getElementById('status').value,
        Notes: document.getElementById('notes').value,
    };
    
    const action = domainData.DomainID ? 'updateDomain' : 'addDomain';
    
    try {
        const response = await fetch(SCRIPT_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'text/plain;charset=utf-8' },
            body: JSON.stringify({ action, domainData }),
        });
        const result = await response.json();

        if (result.status === 'success') {
            alert(result.message);
            document.getElementById('domain-modal').style.display = 'none';
            loadDomains(JSON.parse(sessionStorage.getItem('user'))); // Reload table
        } else {
            alert('Error: ' + result.message);
        }
    } catch(err) {
        alert('An error occurred during submission.');
    } finally {
        saveBtn.disabled = false;
        saveBtn.textContent = 'Save Domain';
    }
}

async function deleteDomain(domainId) {
    if (!confirm('Are you sure you want to delete this domain?')) return;

    const response = await fetch(SCRIPT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'text/plain;charset=utf-8' },
        body: JSON.stringify({ action: 'deleteDomain', domainId }),
    });
    const result = await response.json();

    if (result.status === 'success') {
        alert(result.message);
        loadDomains(JSON.parse(sessionStorage.getItem('user'))); // Reload table
    } else {
        alert('Error: ' + result.message);
    }
}

async function openProfileModal() {
    const user = JSON.parse(sessionStorage.getItem('user'));
    const response = await fetch(SCRIPT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'text/plain;charset=utf-8' },
        body: JSON.stringify({ action: 'getUserProfile', username: user.username }),
    });
    const result = await response.json();

    if (result.status === 'success') {
        document.getElementById('profile-username').value = result.data.username;
        document.getElementById('profile-fullname').value = result.data.fullName;
        document.getElementById('profile-row-index').value = result.data.rowIndex;
        document.getElementById('profile-new-password').value = ''; // Clear password field
        document.getElementById('profile-modal').style.display = 'block';
    } else {
        alert('Error fetching profile: ' + result.message);
    }
}

async function handleProfileFormSubmit(e) {
    e.preventDefault();
    const profileData = {
        rowIndex: document.getElementById('profile-row-index').value,
        fullName: document.getElementById('profile-fullname').value,
        newPassword: document.getElementById('profile-new-password').value,
    };

    const response = await fetch(SCRIPT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'text/plain;charset=utf-8' },
        body: JSON.stringify({ action: 'updateUserProfile', profileData }),
    });
    const result = await response.json();

    if (result.status === 'success') {
        alert(result.message);
        // Update sessionStorage if full name changed
        const user = JSON.parse(sessionStorage.getItem('user'));
        user.fullName = profileData.fullName;
        sessionStorage.setItem('user', JSON.stringify(user));
        document.getElementById('user-fullname').textContent = user.fullName;
        document.getElementById('profile-modal').style.display = 'none';

        if(profileData.newPassword){
            alert("Password updated. Please log out and log in again.");
        }
    } else {
        alert('Error updating profile: ' + result.message);
    }
}

function logout() {
    sessionStorage.removeItem('user');
    window.location.href = 'index.html';
}
Use code with caution.
JavaScript
အဆင့် (၄) - GitHub ပေါ်တင်ပြီး အသုံးပြုခြင်း
GitHub မှာ Account အသစ်ဖွင့်ပါ (မရှိသေးလျှင်)။
Repository အသစ်တစ်ခု ဖန်တီးပါ။ ဥပမာ domain-management-system လို့ နာမည်ပေးပါ။ Public အဖြစ်ထားပါ။
သင် ခုနက ဖန်တီးထားတဲ့ index.html, dashboard.html, style.css, app.js ဖိုင် ၄ ဖိုင်ကို အဲ့ဒီ Repository ထဲကို Upload တင်ပါ။
Repository ရဲ့ Settings -> Pages ကိုသွားပါ။
Source (or Build and deployment) အောက်မှာ Branch ကို main (or master) ရွေးပြီး Folder ကို /(root) အဖြစ်ထားကာ Save ကို နှိပ်ပါ။
ခဏအကြာမှာ သင့်ရဲ့ Website ကို GitHub Pages မှာ publish လုပ်ပြီးကြောင်း စာစိမ်းလေးနဲ့ URL တစ်ခု ပေါ်လာပါလိမ့်မယ်။
Your site is live at https://your-username.github.io/domain-management-system/
အဲ့ဒီ URL ကနေတစ်ဆင့် သင်ဖန်တီးထားတဲ့ Domain Management System ကို စတင်အသုံးပြုနိုင်ပါပြီ။
အသုံးပြုပုံ
ရလာတဲ့ URL ကို ဖွင့်ပြီး index.html login page မှာ admin/A@mmitsg သို့မဟုတ် dmd/dcP@dmd နဲ့ ဝင်ပါ။
Login အောင်မြင်ရင် dashboard.html ကို ရောက်သွားပါမယ်။
Admin ဆိုရင် Domain များကို အသစ်ထည့်ခြင်း၊ ပြင်ခြင်း၊ ဖျက်ခြင်းများ ပြုလုပ်နိုင်ပြီး Domain အားလုံးကို မြင်ရပါမယ်။
dmd ဆိုရင် သူ့ကို Owner အဖြစ် သတ်မှတ်ထားတဲ့ Domain များကိုသာ မြင်ရပါမယ်။ ပြင်/ဖျက် လုပ်လို့မရပါ။
User တိုင်း မိမိ Profile (Full Name, Password) ကို ပြင်နိုင်ပါမယ်။
Search bar မှာ Domain နာမည်ရိုက်ပြီး ရှာဖွေနိုင်ပါတယ်။